// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	domain "weather-server/src/domain"

	mock "github.com/stretchr/testify/mock"
)

// IForecast is an autogenerated mock type for the IForecast type
type IForecast struct {
	mock.Mock
}

// GetForecastURL provides a mock function with given fields: lat, lon
func (_m *IForecast) GetForecastURL(lat string, lon string) (*string, error) {
	ret := _m.Called(lat, lon)

	if len(ret) == 0 {
		panic("no return value specified for GetForecastURL")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*string, error)); ok {
		return rf(lat, lon)
	}
	if rf, ok := ret.Get(0).(func(string, string) *string); ok {
		r0 = rf(lat, lon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(lat, lon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeatherForecast provides a mock function with given fields: forecastURL
func (_m *IForecast) GetWeatherForecast(forecastURL string) (*domain.WeatherForecast, error) {
	ret := _m.Called(forecastURL)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherForecast")
	}

	var r0 *domain.WeatherForecast
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.WeatherForecast, error)); ok {
		return rf(forecastURL)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.WeatherForecast); ok {
		r0 = rf(forecastURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WeatherForecast)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(forecastURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIForecast creates a new instance of IForecast. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIForecast(t interface {
	mock.TestingT
	Cleanup(func())
}) *IForecast {
	mock := &IForecast{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
