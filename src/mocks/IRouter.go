// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	interfaces "weather-server/src/interfaces"

	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// IRouter is an autogenerated mock type for the IRouter type
type IRouter struct {
	mock.Mock
}

// GetRouter provides a mock function with given fields:
func (_m *IRouter) GetRouter() *gin.Engine {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRouter")
	}

	var r0 *gin.Engine
	if rf, ok := ret.Get(0).(func() *gin.Engine); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gin.Engine)
		}
	}

	return r0
}

// NewRouter provides a mock function with given fields: router, server
func (_m *IRouter) NewRouter(router *gin.Engine, server interfaces.IServer) *gin.Engine {
	ret := _m.Called(router, server)

	if len(ret) == 0 {
		panic("no return value specified for NewRouter")
	}

	var r0 *gin.Engine
	if rf, ok := ret.Get(0).(func(*gin.Engine, interfaces.IServer) *gin.Engine); ok {
		r0 = rf(router, server)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gin.Engine)
		}
	}

	return r0
}

// NewIRouter creates a new instance of IRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRouter {
	mock := &IRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
