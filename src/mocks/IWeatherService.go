// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	domain "weather-server/src/domain"

	mock "github.com/stretchr/testify/mock"
)

// IWeatherService is an autogenerated mock type for the IWeatherService type
type IWeatherService struct {
	mock.Mock
}

// GetForecast provides a mock function with given fields: lat, lon
func (_m *IWeatherService) GetForecast(lat string, lon string) (*domain.WeatherResponse, error) {
	ret := _m.Called(lat, lon)

	if len(ret) == 0 {
		panic("no return value specified for GetForecast")
	}

	var r0 *domain.WeatherResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*domain.WeatherResponse, error)); ok {
		return rf(lat, lon)
	}
	if rf, ok := ret.Get(0).(func(string, string) *domain.WeatherResponse); ok {
		r0 = rf(lat, lon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.WeatherResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(lat, lon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIWeatherService creates a new instance of IWeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIWeatherService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IWeatherService {
	mock := &IWeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
