// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// IServer is an autogenerated mock type for the IServer type
type IServer struct {
	mock.Mock
}

// GetHealth provides a mock function with given fields: ctx
func (_m *IServer) GetHealth(ctx *gin.Context) {
	_m.Called(ctx)
}

// GetWeatherForecast provides a mock function with given fields: ctx
func (_m *IServer) GetWeatherForecast(ctx *gin.Context) {
	_m.Called(ctx)
}

// Start provides a mock function with given fields: router, address
func (_m *IServer) Start(router *gin.Engine, address string) error {
	ret := _m.Called(router, address)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*gin.Engine, string) error); ok {
		r0 = rf(router, address)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIServer creates a new instance of IServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *IServer {
	mock := &IServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
